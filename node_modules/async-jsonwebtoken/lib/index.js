"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.sign = exports.TokenExpiredError = exports.NotBeforeError = exports.JsonWebTokenError = exports.decode = void 0;
const jsonwebtoken_1 = require("jsonwebtoken");
const future_1 = require("./future");
var jsonwebtoken_2 = require("jsonwebtoken");
Object.defineProperty(exports, "decode", { enumerable: true, get: function () { return jsonwebtoken_2.decode; } });
Object.defineProperty(exports, "JsonWebTokenError", { enumerable: true, get: function () { return jsonwebtoken_2.JsonWebTokenError; } });
Object.defineProperty(exports, "NotBeforeError", { enumerable: true, get: function () { return jsonwebtoken_2.NotBeforeError; } });
Object.defineProperty(exports, "TokenExpiredError", { enumerable: true, get: function () { return jsonwebtoken_2.TokenExpiredError; } });
function sign(payload, secretOrPrivateKey, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield future_1.default(new Promise((res, rej) => {
            jsonwebtoken_1.sign(payload, secretOrPrivateKey, options, (err, token) => {
                if (err)
                    return rej(err);
                return res(token);
            });
        }));
    });
}
exports.sign = sign;
function verify(token, secretOrPublicKey, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield future_1.default(new Promise((res, rej) => {
            jsonwebtoken_1.verify(token, secretOrPublicKey, options, (err, decoded) => {
                if (err)
                    return rej(err);
                return res(decoded);
            });
        }));
    });
}
exports.verify = verify;
